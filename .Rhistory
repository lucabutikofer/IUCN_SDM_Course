# load libraries
library("red")
library("raster")
library("rgbif")
library("ENMeval")
library("dismo")
# Citation:
# get data for exercise
# ~ 5 km resolution
DEM <- getData('worldclim', var='alt', res=2.5) #digital elevation model
DEM
plot(DEM)
BIO <- getData('worldclim', var='bio', res=2.5) #bioclimatic covariates; see https://www.worldclim.org/data/bioclim.html
BIO <- getData('worldclim', var='bio', res=2.5) #bioclimatic covariates; see https://www.worldclim.org/data/bioclim.html
BIO
writeRaster(BIO, "bio.tiff")
species_name <- c("Bufo bufo") # pick your poison :-). Bufo bufo works, for other spp the code might have to be debugged
# download GBIF occurrence data for your species
# check also https://www.r-bloggers.com/2021/03/downloading-and-cleaning-gbif-data-with-r/
SP_GBIF <- occ_data(scientificName = species_name,
hasCoordinate = TRUE,
limit = 500)
SP_GBIF
# get the columns that matter for mapping and cleaning the occurrence data:
SP_OCC <- SP_GBIF$data[ , c("decimalLongitude", "decimalLatitude", "coordinateUncertaintyInMeters")]
head(SP_OCC)
# filter observations with uncertainty larger than raster grain
SP_OCC <- SP_OCC[SP_OCC$coordinateUncertaintyInMeters < 2000,]
head(SP_OCC)
# remove observations with no coordinates
SP_OCC <- SP_OCC[!is.na(SP_OCC$decimalLatitude),]
SP_OCC <- SP_OCC[!is.na(SP_OCC$decimalLongitude),]
# retain only coordinates
SP_OCC <- SP_OCC[,1:2]
# crop covariates around occurrences to limit model extent;
# climate analogs, e.g., in Alaska and Argentina where we know that Bufo bufo does not occurr
crop_extent <- extent(min(SP_OCC[,1]) - 10,
max(SP_OCC[,1]) + 10,
min(SP_OCC[,2]) - 10,
max(SP_OCC[,2]) + 10)
DEM <- crop(DEM, crop_extent)
BIO <- crop(BIO, crop_extent)
object.size(BIO)
object.size(dem)
object.size(DEM)
writeRaster(DEM, "dem.tiff")
writeRaster(BIO, "bio.tiff")
plot(BIO)
# map
plot(DEM)
bio
BIO
biopoints(SP_OCC[ , c("decimalLongitude", "decimalLatitude")], col = "black")
points(SP_OCC[ , c("decimalLongitude", "decimalLatitude")])
??biopoints
# location where the occurrence of the species is unknown
BACKGROUND_LOC <- dismo::randomPoints(BIO[[1]], 1000) # usually you want more points
?randomPoints
# overwirte the names given by the function randomPoints, because we are using geographic and not projected coordinates
colnames(BACKGROUND_LOC) <- colnames(SP_OCC)
BACKGROUND_LOC
BACKGROUND_LOC %>% head
# check on the map
points(BACKGROUND_LOC[ , c("decimalLongitude", "decimalLatitude")], col = "blue")
?ENMeval::ENMevaluate
# now we can fit a maxent model with ENMeval; https://www.rdocumentation.org/packages/ENMeval/versions/0.3.1/topics/ENMevaluate
MODEL <- ENMeval::ENMevaluate(occ = SP_OCC, # occurrence locations of the species
env = BIO, # raster covariates
bg.coords = BACKGROUND_LOC,
tune.args = list(fc = c("L","LQ"), # type of response to environmental covariates
rm = 1:3), # regularization multiplier
partitions = "block",
#other.settings = list(abs.auc.diff = FALSE, pred.type = "logistic", validation.bg = "partition"),
algorithm = "maxnet",
parallel = TRUE)
# pick out of the models fitted by ENMeval that with lowest AIC
best_model <- (MODEL@models[[which.min(MODEL@results$AICc)]])
best_model
rm(best_model)
# pick out of the models fitted by ENMeval that with lowest AIC
best_model <- MODEL@models[[which.min(MODEL@results$AICc)]]
best_model
# use this models to obtain raster of predictions
pred_best_model <- predict(BIO, best_model, type = 'cloglog')
pred_best_model
# check model
plot(pred_best_model)
# convert into binary maps
#find threshold of sensitivity equaling specificity
p <- raster::extract(pred_best_model, SP_OCC, method = "simple")
a <- raster::extract(pred_best_model, BACKGROUND_LOC, method = "simple")
e <- dismo::evaluate(p=p, a=a)
a
e
thresholds <- dismo::threshold(e)
thresholds
pred_best_model
MAP <- pred_best_model
MAP[MAP < thresholds$equal_sens_spec] <- 0
MAP[MAP >= thresholds$equal_sens_spec] <- 1
plot(MAP)
### 1) calculate the Area Of Occupancy (AOO) of a species
aoo(MAP)
### 2) calculate the Extent Of Occurrence (EOO) of a species
eoo(MAP)
# change resolution
MAP_25kmres <- raster::aggregate(MAP, 5, fun = max)
MAP_50kmres <- raster::aggregate(MAP, 10, fun = max)
MAP_100kmres <- raster::aggregate(MAP, 20, fun = max)
aoo(MAP)
aoo(MAP_25kmres)
aoo(MAP_50kmres)
aoo(MAP_100kmres)
eoo(MAP)
eoo(MAP_25kmres)
eoo(MAP_50kmres)
eoo(MAP_100kmres)
summary <- data.frame (resolution  = c(5, 25, 50, 100),
AOO = c(aoo(MAP), aoo(MAP_25kmres), aoo(MAP_50kmres), aoo(MAP_100kmres)),
EOO = c(eoo(MAP), eoo(MAP_25kmres), eoo(MAP_50kmres), eoo(MAP_100kmres))
)
summary
plot(summary$AOO ~ summary$resolution)
plot(summary$EOO ~ summary$resolution)
### Calculate the Area Of Habitat (AOH) of a species
# check text overview of your species at https://www.iucnredlist.org/species/54596/11159939
# filter by elevation; "The species has an altitudinal range of sea level to 3,000m asl"
# to spice things up, let's assume it's only between 200m and 3000m slm and only in forests
ELEV_FILTER <- DEM
ELEV_FILTER[ELEV_FILTER > 3000 | ELEV_FILTER < 200] <- NA
# reclassify all elev different from 0 to 1
ELEV_FILTER[ELEV_FILTER > 0 ] <- 1
library(geodata)
FOREST <- geodata::landcover("trees","C:\\Users\\feder\\OneDrive\\Desktop\\IUCN summer school")
sessionInfo()
library(glmnet)
?install.packages
FOREST <- geodata::landcover("trees","C:\\Users\\feder\\OneDrive\\Desktop\\IUCN summer school")
FOREST
plot(FOREST)
FOREST <- geodata::landcover("trees","C:\\Users\\feder\\OneDrive\\Desktop\\IUCN summer school")
rm(FOREST)
library(geodata)
FOREST <- geodata::landcover("trees","C:\\Users\\feder\\OneDrive\\Desktop\\IUCN summer school")
?geodata::landcover
FOREST <- geodata::landcover("trees",".")
FOREST
plot(FOREST)
FOREST[FOREST > 0 ] <- 1
FOREST[FOREST == 0 ] <- NA
plot(FOREST)
forest <- raster(FOREST)
plot(forest)
FOREST <- crop(FOREST, crop_extent)
plot(FOREST)
?resample
ELEV_FILTER
ELEV_FILTER %>% plot
# standardize resolution and extent
FOREST_FILTER <- resample(ELEV_FILTER, raster(FOREST), "ngb")
# standardize resolution and extent
FOREST_FILTER <- raster::resample(ELEV_FILTER, raster(FOREST), "ngb")
FOREST_FILTER
FOREST_FILTER %>% plot
ELEVATION_FILTER %>% plot
ELEV_FILTER %>% plot
par(mfrow = c(1,2))
plot(ELEV_FILTER, main = "elevation")
plot(FOREST_FILTER, main = "forest")
?raster::resample
# standardize resolution and extent
FOREST_FILTER <- raster::resample(raster(FOREST), ELEV_FILTER, "ngb")
plot(ELEV_FILTER, main = "elevation")
plot(FOREST_FILTER, main = "forest")
extent(FOREST_FILTER)
extent(FOREST_FILTER) == extent(FOREST_FILTER)
extent(FOREST_FILTER)
aoh <- ELEV_FILTER*FOREST_FILTER
plot(aoh)
plot(aoo)
MAP
AOH <- ELEV_FILTER*FOREST_FILTER
rm(aoh)
AOH <- ELEV_FILTER*FOREST_FILTER
par(mfrow = C(1,2))
plot(MAP, main = "MaxEnt Model", col = "black")
plot(MAP, main = "MaxEnt Model", col = "black")
plot(AOH, main = "Area Of Habitat", col = "black")
plot(MAP, main = "MaxEnt Model", col = "black", legend = F)
plot(AOH, main = "Area Of Habitat", col = "black", legend = F)
plot(DEM)
plot(DEM, col = grey.colors(40))
plot(DEM, col = grey.colors(20))
plot(DEM, col = grey.colors(80))
plot(MAP, main = "MaxEnt Model", col = "red", add = T)
raster::plot()
?raster::plot()
?raster::plot
plot(MAP, main = "MaxEnt Model", col = "red", add = T, alpha = .5)
plot(MAP, main = "MaxEnt Model", col = "red", add = T, alpha = 0.5)
plot(MAP, main = "MaxEnt Model", col = 2, add = T, alpha = 0.5)
plot(MAP, main = "MaxEnt Model", col = heat.colors(2), add = T, alpha = 0.5)
plot(MAP, main = "MaxEnt Model", col = adjustcolor("red", alpha.f = .5), add = T)
plot(DEM, col = grey.colors(80), legend = F)
plot(MAP, main = "MaxEnt Model", col = adjustcolor("red", alpha.f = .5), add = T)
plot(DEM, col = grey.colors(80), legend = F)
plot(AOH, main = "Area Of Habitat", legend = F, col = adjustcolor("red", alpha.f = .3), add = T)
plot(DEM, col = grey.colors(80), legend = F)
plot(MAP, main = "MaxEnt Model", legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), legend = F)
plot(AOH, main = "Area Of Habitat", legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(MAP, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "Area Of Habitat", legend = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(MAP)
MAP
AOH
SDM <- MAP
SDM[MAP == 0] <- NA
par(mfrow = C(1,2))
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(MAP, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "Area Of Habitat", legend = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
par(mfrow = C(1,2))
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(SDM, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "Area Of Habitat", legend = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
par(mfrow = C(1,2))
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(SDM, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "Area Of Habitat", legend = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
par(mfrow = c(1,2))
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(SDM, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "Area Of Habitat", legend = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
op <- par(mfrow = c(1,2))
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(SDM, legend = F, col = adjustcolor("pink", alpha.f = .4), add = T)
object.size(FOREST)
inMemory(FOREST)
writeRDS(FOREST, "forest.RDS")
saveRDS(FOREST, "forest.RDS")
object.size(DEM)
inMemory(DEM)
saveRDS(DEM, "dem.RDS")
object.size(BIO)
inMemory(BIO)
readAll(BIO)
saveRDS(BIO, "bio.RDS")
BIO<- readAll(BIO)
saveRDS(BIO, "bio.RDS")
?geodata::landcover
