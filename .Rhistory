install.packages('wallace')
library(wallace)
run_wallace()
library(wallace)
run_wallace()
# load libraries
library("red")
library("raster")
library("rgbif")
library("ENMeval")
library("dismo")
# load libraries
library("red")
library("raster")
library("rgbif")
library("ENMeval")
library("dismo")
BIO <- readRDS("~/MEGA/UNIL/IUCN_SDM_Course/bio.RDS")
BIO
species_name <- c("Bufo bufo") # pick your poison :-). Bufo bufo works, for other spp the code might have to be debugged
# download GBIF occurrence data for your species
# check also https://www.r-bloggers.com/2021/03/downloading-and-cleaning-gbif-data-with-r/
SP_GBIF <- occ_data(scientificName = species_name,
hasCoordinate = TRUE,
limit = 500)
SP_GBIF
saveRDS(SP_GBIF, "Bufo_bufo.RDS")
setwd("~/MEGA/UNIL/IUCN_SDM_Course")
setwd("~/MEGA/UNIL/IUCN_SDM_Course")
saveRDS(SP_GBIF, "Bufo_bufo.RDS")
DEM <- getData('worldclim', var='alt', res=2.5) #digital elevation model
BIO <- getData('worldclim', var='bio', res=2.5) #bioclimatic covariates; see https://www.worldclim.org/data/bioclim.html
BIO
DEM
plot(DEM)
BIO
plot(BIO[[1]])
species_name <- c("Bufo bufo") # pick your poison :-). Bufo bufo works, for other spp the code might have to be debugged
# download GBIF occurrence data for your species
# check also https://www.r-bloggers.com/2021/03/downloading-and-cleaning-gbif-data-with-r/
SP_GBIF <- occ_data(scientificName = species_name,
hasCoordinate = TRUE,
limit = 500)
SP_GBIF
# get the columns that matter for mapping and cleaning the occurrence data:
SP_OCC <- SP_GBIF$data[ , c("decimalLongitude", "decimalLatitude", "coordinateUncertaintyInMeters")]
head(SP_OCC)
plot(SP_OCC$decimalLongitude, SP_OCC$decimalLatitude)
points(SP_OCC$decimalLongitude, SP_OCC$decimalLatitude)
# filter observations with uncertainty larger than raster grain
SP_OCC <- SP_OCC[SP_OCC$coordinateUncertaintyInMeters < 2000,]
# remove observations with no coordinates
SP_OCC <- SP_OCC[!is.na(SP_OCC$decimalLatitude),]
SP_OCC <- SP_OCC[!is.na(SP_OCC$decimalLongitude),]
# retain only coordinates
SP_OCC <- SP_OCC[,1:2]
head(SP_OCC)
points(SP_OCC$decimalLongitude, SP_OCC$decimalLatitude, col = "red")
# crop covariates around occurrences to limit model extent;
# climate analogs, e.g., in Alaska and Argentina where we know that Bufo bufo does not occurr
crop_extent <- extent(min(SP_OCC[,1]) - 10,
max(SP_OCC[,1]) + 10,
min(SP_OCC[,2]) - 10,
max(SP_OCC[,2]) + 10)
crop_extent
plot(crop_extent, add = T)
DEM <- crop(DEM, crop_extent)
BIO <- crop(BIO, crop_extent)
plot(DEM)
points(SP_OCC[ , c("decimalLongitude", "decimalLatitude")])
# map
plot(DEM)
points(SP_OCC[ , c("decimalLongitude", "decimalLatitude")])
# location where the occurrence of the species is unknown
BACKGROUND_LOC <- dismo::randomPoints(BIO[[1]], 1000) # usually you want more points
# overwirte the names given by the function randomPoints, because we are using geographic and not projected coordinates
colnames(BACKGROUND_LOC) <- colnames(SP_OCC)
# check on the map
points(BACKGROUND_LOC[ , c("decimalLongitude", "decimalLatitude")], col = "blue")
# now we can fit a maxent model with ENMeval; https://www.rdocumentation.org/packages/ENMeval/versions/0.3.1/topics/ENMevaluate
MODEL <- ENMeval::ENMevaluate(occ = SP_OCC, # occurrence locations of the species
env = BIO, # raster covariates
bg.coords = BACKGROUND_LOC,
tune.args = list(fc = c("L","LQ"), # type of response to environmental covariates
rm = 1:3), # regularization multiplier
partitions = "block",
#other.settings = list(abs.auc.diff = FALSE, pred.type = "logistic", validation.bg = "partition"),
algorithm = "maxnet",
parallel = TRUE)
# pick out of the models fitted by ENMeval that with lowest AIC
best_model <- MODEL@models[[which.min(MODEL@results$AICc)]]
# use this models to obtain raster of predictions
pred_best_model <- predict(BIO, best_model, type = 'cloglog')
# check model
plot(pred_best_model)
points(SP_OCC[ , c("decimalLongitude", "decimalLatitude")])
# convert into binary maps
#find threshold of sensitivity equaling specificity
p <- raster::extract(pred_best_model, SP_OCC, method = "simple")
a <- raster::extract(pred_best_model, BACKGROUND_LOC, method = "simple")
e <- dismo::evaluate(p=p, a=a)
thresholds <- dismo::threshold(e)
MAP <- pred_best_model
MAP[MAP < thresholds$equal_sens_spec] <- 0
MAP[MAP >= thresholds$equal_sens_spec] <- 1
plot(MAP)
### 1) calculate the Area Of Occupancy (AOO) of a species
aoo(MAP)
### 2) calculate the Extent Of Occurrence (EOO) of a species
eoo(MAP)
# change resolution
MAP_25kmres <- raster::aggregate(MAP, 5, fun = max)
MAP_50kmres <- raster::aggregate(MAP, 10, fun = max)
MAP_100kmres <- raster::aggregate(MAP, 20, fun = max)
plot(MAP_50kmres)
#
aoo(MAP)
aoo(MAP_25kmres)
aoo(MAP_50kmres)
aoo(MAP_100kmres)
eoo(MAP)
eoo(MAP_25kmres)
eoo(MAP_50kmres)
eoo(MAP_100kmres)
summary <- data.frame (resolution  = c(5, 25, 50, 100),
AOO = c(aoo(MAP), aoo(MAP_25kmres), aoo(MAP_50kmres), aoo(MAP_100kmres)),
EOO = c(eoo(MAP), eoo(MAP_25kmres), eoo(MAP_50kmres), eoo(MAP_100kmres))
)
summary
### Calculate the Area Of Habitat (AOH) of a species
# check text overview of your species at https://www.iucnredlist.org/species/54596/11159939
# filter by elevation; "The species has an altitudinal range of sea level to 3,000m asl"
# to spice things up, let's assume it's only between 200m and 3000m slm and only in forests
ELEV_FILTER <- DEM
ELEV_FILTER[ELEV_FILTER > 3000 | ELEV_FILTER < 200] <- NA
# reclassify all elev different from 0 to 1
ELEV_FILTER[ELEV_FILTER > 0 ] <- 1
plot(DEM)
plot(ELEV_FILTER)
FOREST <- readRDS("~/MEGA/UNIL/IUCN_SDM_Course/forest.RDS")
plot(FOREST)
plot(raster(FOREST))
plot(as.raster(FOREST))
FOREST2 <- raster(FOREST)
plot(FOREST2)
install.packages("geodata")
install.packages("geodata")
library(geodata)
FOREST <- geodata::landcover("trees", ".")
FOREST[FOREST > 0 ] <- 1
plot(FOREST)
FOREST <- crop(FOREST, crop_extent)
# standardize resolution and extent
FOREST_FILTER <- raster::resample(raster(FOREST), ELEV_FILTER, "ngb")
plot(FOREST_FILTER)
# compute aoh
AOH <- ELEV_FILTER*FOREST_FILTER
# visual comparison between Area Of Habitat and MaxEnt model
SDM <- MAP
SDM[MAP == 0] <- NA
op <- par(mfrow = c(1,2))
plot(DEM, col = grey.colors(80), main = "MaxEnt Model", legend = F)
plot(SDM, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
plot(DEM, col = grey.colors(80), main = "Area Of Habitat", legend = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = T)
par(op)
plot(SDM, legend = F, col = adjustcolor("red", alpha.f = .4), add = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = F)
plot(AOH, legend = F, col = adjustcolor("red", alpha.f = .4), add = F)
plot(SDM, legend = F, col = adjustcolor("red", alpha.f = .4), add = F)
